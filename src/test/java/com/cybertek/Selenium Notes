


***************** Day 6 ********************************************************************************************


Today is 7/2/2019 Notes

We will talk about check boxes, radio buttons, and something else:)

Please work on the warm up task!

TEST 1
go to amazon
enter any search term
click on search button
verify title contains search term

TEST 2
go to wikipedia.org
enter search term ‘selenium webdriver’
click on search button
click on search result ‘Selenium (software)’
verify url ends with ‘x’

Advise: Do not try to make test pass. You have to find bugs.

Goal of tester(manual or automation) to catch bugs. If your script fails - maybe you found a bug. Do not try to make your test pass.


Story:

I found a bug, in the application, with my co-worker script. The thing was, his script wasn't working properly. Why? because he had to fill out work with different values. But what he he entered into form, same values. I noticed from the regression report, that test data looks weird. I've tried to change his test and run it again. Turns out that out of two input boxes, only one was saving data, another one - was just copying data.

What do you do if script fails?

Run it again, maybe it's a script issue (locators are wrong, not enough wait time, etc..)

Test manually (if your script is correct, confirm bug by manual testing)
If it's a bug - report.

This an example of radio button.

<input type="radio" id="blue" name="color" checked="">

Tag name - input

type - radio

These 2 things are required if you want to create radio button.

.isSelected() - verifies if radio button/check box is selected. Returns true or false.

isEnabled() - Is the element currently enabled or not?

Or in other words, isEnabled() returns true if you can click on radio button. If it's disabled - it will return false.

!greenBTN.isEnabled() - to check if button is disabled.


	//TASK!
    //write a test(method) that will do following:
    //verify that blue button is selected
    //then click on black button
    //verify that black button is selected
    //verify that blue button is not selected

Relative xpath that can find all radio buttons on the page:
//input[@type='radio']

Most common syntax of xpath: //tagname[@attribute='value']
Every radio button must have tag input, and be type of radio

#######################Checkboxes

<input type="checkbox" checked="">

like radio button, check box is also another variation of input in HTML.

To transform input box into check box, you need to specify type that is equals to checkbox

Checkbox can be preselected
If you have a group of check boxes with a same name attribute, you will be able to select only one.

#################TASK

1. Go to http://practice.cybertekschool.com/checkboxes
2. Verify that checkbox 1 is not selected.
3. Verify that checkbox 2 is selected.


//input[@type='checkbox'][1]

This xpath means find me input with attribute type that has value checkbox, and get only first element.

.isDisplayed() - will return true, if element is not hidden. In HTML you can hide elements, even though they are in source code. Thus, element will not be visible to user.

INTERVEW QESTION: HOW TO VERIFY THAT ELEMENT DOESN'T EXIST ANY MORE?
This method (isDisplayed()) will only check if element is visible or no. If element is not on page at all, you will get NoSuchElementException. I saw many times, when people where using this method to verify that element doesn't exist any more. This is a mistake. In order to check if element doesn't exist, use: findElements(locator).size() == 0. If list is empty, that means this element doesn't exists, not in the code. No exception will happened. For example, you need to verify that that record was deleted, or some image, etc.




***************** Day 7 ********************************************************************************************

HELLO!

	Agenda:
	-we will talk a little more about xpath
	it's not the last session on xpath, we will have class dedicated to locators.
	- drop downs, how to handle them. Drop downs with select and without.
	- list of elements or List<WbElement> and findElements (continue)

###### XPATH (XML Path)

One of the locators strategies in selenium. How to use it?

By.xpath(locator)

For FireFox, there was a extension called FireBug, FirePath that could generate xpath for any element. No these extension deprecated.

In google chrome or firefox, you can get auto generated xpath by default.

I personally don't trust any auto-generated locators. I prefer to build it by myself. I would say the las option for locator, is xpath based on text of element, that always worked for me.


Based on my experience, auto-generated lcoators not very reliable. You can use them, if you really don't know how to create one.

XPATH is very useful when:
	you cannot find element other than only by text.
	you have to find dynamic element (some attribute values are dynamic, position of element is dynamic)


There are 2 types of xpath:

Relative and Absolute.

I would say that we are trying to use only relative xpath.

Absolute:
1. It always starts from '/'
2. It must start from root element <html> tag. You cannot start from the middle of the page. You must go from parent to child, you have to go through entire tree of elements.


/html/body/div/div[2]/div/div[1]/button[3]

Story:

At work, we had requirement to change all possible locators from xpath to css. Our test lead inferred that it will reduce execution time. Actually - not.

Id should be faster then xpath, this is what people say. But, in my application, I didn't notice any difference while testing on google chrome. On IE - xpath was a little slower(very subjective). Again, it's my personal experience. IN google, you can find different opinion. In terms of performance. css and id is the same. Selenium, uses css selector internally for id.


Relative XPATH:

1. Always starts with //
2. It can start from anywhere.

basic syntax:

//tag[@attribute='value']
//*[@attribute='value']
//tag[text()='some text']
//*[contains(@attribute,'value')]
//*[contains(text(),'some text']

* - means any tag.

//button[text()='Button 4']
//button[@onclick='button4()']
//*[contains(text(),'Button 4')]
//button[contains(@onclick,'4')]


//select[@aria-label='Select a category for search']

.= is the same as text()=

//button[5] - to get the fifth one

//button[last()] - last element.

inside [ ] you can specify index of element.

//button[@class='btn btn-primary'][@onclick='button2()']

- to specify 2 attributes

//button[@class='btn btn-primary' and @onclick='button2()']

starts with some value:

//button[starts-with(@id,'button_')]

To be continue.....

In HTML, usually dropdowns have tag <select>

<select id="dropdown">
     <option value="" disabled="disabled" selected="selected">Please select an option</option>
     <option value="1">Option 1</option>
     <option value="2">Option 2</option>
 </select>

 In Selenium, there is a special class that can handle these kind of drop downs. We use Select class.

 import org.openqa.selenium.support.ui.Select;

 .getFirstSelectedOption() - will return web element that represents already selected option in the dropdown. We can read text, value or other attributes of this selection.
 Usually, we read only text to verify that selected text is equals to expected one.


import org.openqa.selenium.support.ui.Select;

Use only this import. Importing something different means dealing with totally different library. This library is coming from selenium package.

Select in Selenium with Select class from Selenium

hahaha....

How to deal with <select> drop down?

Step 1. Find this dropdown by some locator and create webelement.
Step 2. Create an object of Select class.
Step 3. Provide webelement from Step 1 into constructor of Select object.


value of attribute value

ha ha.. again, very funny selenium joke (no)

<option value="PA">Pennsylvania</option>

we can select this option based on value PA or based on visible text Pennsylvania


Homework:

Practice:
	Task #1
       deselectAll();
       deselectByIndex();
       deselectByValue();
       deselectByVisibleText();
       isMultiple();

   Task #2
    Also, write a method that will check that values in dropdown are stored in the alphabetic order

   Task #3
   	Try to automate non-select dropdown. (Select a website)

****************************************    *******************************************************************************

7/7/2019

 Today we will talk about TESTNG


What is unit testing?

Testing of smallest functional part of application.
In other words - testing of methods.

Test data: array1{1,2,453, 3};

assertEquals(findMax(array1), 453); // if it's true,

unit test passed.

public int findMax(int[] array){
	int max = array[0]
	for(int i: array){
		if(i> max)
		 max = i
	}
	return max;
}

My story

###I've never done unit testing at work,
it was developers responsibility. My developers always called
unit tests junits.

Unit tests written manually by developers. Unit test is an
essential testing stage that helps to find bugs and fix them
immediately.

For unit testing, there are some popular testing frameworks
(or tools) such as: TestNG (java), JUnit (java), NUnit (.net).

TestNG - let's you write unit tests and do assertions. Also it
helps us to generate reports.

###I would say that report is the most important thing
for management. Why? Because they don't check your code,
they can understand what tests passed or failed only based
on report. Report is like visual representation of test results.
TestNG helps us to group tests, create test suites. Perform data
driven testing (DDT).

Example:
assertEquals(2, 2),
assertFalse( "apple" == "orange"),
assertTrue("apple".equals("apple"))

As selenium testers, we use testng for writing, organizing,
asserting and running selenium scripts.

@Test
public void test1(){
	driver.get("google.com");
	driver.find().click()
}

@Test - it calls annotation. This annotation will turn method into
test. So we don't need main method to run our code. We can put this
annotation and run method as a test.
*************************************************************************************


Today is 7/10/2019

Topic of today is CSS Selector.

This is one of the locators that we use to find elements.

To build css selector you can use tag name, attribute, parent-child relationship, you can use position.

If we compare it with Xpath, css selector is faster and more readable.

It doesn't starts with // or / , id doesn't have @.

Basic syntax:

	tagname[attribute='value']

CSS selector (locator) cannot find element by text.

[id='disappearing_button'] or #disappearing_button


# - means id.

. - means class

<h3 class="h3">Multiple buttons</h3>

h3[class='h3'] or [class='h3'] or .h3


if  you use .h3 for css selector, it means find me element with class h3.

##### Index of element #########

with css
.btn.btn-primary:nth-of-type(5)
or

[class='btn btn-primary']:nth-of-type(5)

with xpath
//button[@class='btn btn-primary'][5]



[class='btn btn-primary']:nth-of-type(5) - means find me 5th element with class btn btn-primary.

######## Starts-with ###########

caret sign "^" - means starts-with

[id^='button_'] - means find me element, that has id that starts with button_

### Ends-with and multiple attributes

[id$='_button'][onclick='button4()'] - in this case, we specified 2 attributes.

$ - means ends with.

######### Contains ############

[onclick*='5'] - means find me element that contains 5 in attribute onclick.

* - stands for "contains".

[attribute*='value'] - means attribute contains value 'value'.

# - stands for id

#disappearing_button - means element with id disappearing_button.

If in xpath / means direct child, in css we use >.

######### From parent To Child ###################

html/body/div/div[2]/div/div[1]/p - absolute xpath

This is CSS Selector style:

html > body > div > div:nth-of-type(2) > div > div:nth-of-type(1) > p

html > * - means any direct child of html.

##############################
  throw new SkipException("I don't want to run this test.");

  Will skip test. If you put before something, you will get:

  unreachable statement!

@Ignore - will ignore test


 enabled = false - to disable test

  dependsOnMethods = {"button1Test"} - will indicate methods that affects on current test. If those methods fail, it will ignore method with dependency.


  dependsOnMethods - it can be useful when method is dependent on method precondition. We can also specify priority. So method with lowest priority will be running first.


    @Test (priority = 2, dependsOnMethods = {"button1Test", "setup"})

We can specify multiple dependencies for dependsOnMethods parameter. That means test can be dependent on multiple methods at the same time.


If setup method fails, anyway you can run test. If test has a dependency, method that it depend on, must run before anyways. Regardless on priority.

Priority will be ignored in this case.